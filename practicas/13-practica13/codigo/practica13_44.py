# -*- coding: utf-8 -*-
"""Practica13_proba.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Olv2E2SOGlxWUClmhNJy1C8Mz_npwW8S

# Pr√°ctica 13: Problema de la ruina
Andres Urbano Guillermo Gerardo (Alumnolcd44)
"""

import random
import matplotlib.pyplot as plt
import numpy as np 
import threading as th

def simular_juego(M=50):    
    y = [M]
    cota = 2*M
    while M < cota and M > 0:    
        eleccion = random.random()
        if eleccion < 0.50:            
            M -= 1 
        else:
            M += 1
        y.append(M)        
    return y

for x in range(5):
    M = 50
    y = np.array(simular_juego(M))
    x = np.arange(1, len(y)+1)
    plt.plot(x, y)

"""## Ejercicio 3"""

import threading as th

def simular_tiempo(M=50, n=0):   
    cota = 2 *M              
    while M < cota and M > 0:    
        eleccion = random.random()
        if eleccion < 0.50:            
            M -= 1 
        else:
            M += 1
        n += 1        
    return n

def calcular_tiempos(M, k, tiempos):               
    for _ in range(k):
        ts = simular_tiempo(M)
        tiempos.append(ts)

"""---"""

# Para k=100 M = 20
tiempos = []
M = 20
k = 100
for _ in range(k):
    ts = simular_tiempo(M)
    tiempos.append(ts)
vec_prom = np.mean(np.array(tiempos))
print(vec_prom)

# Para k=100 M = 40
tiempos = []
M = 40
k = 100
for _ in range(k):
    ts = simular_tiempo(M)
    tiempos.append(ts)
vec_prom = np.mean(np.array(tiempos))
print(vec_prom)

# Para k=100 M = 80
tiempos = []
M = 80
k = 100
for _ in range(k):
    ts = simular_tiempo(M)
    tiempos.append(ts)
vec_prom = np.mean(np.array(tiempos))
print(vec_prom)

# Para k=100 M = 150
num_hilos = 10
tiempos = [[] for i in range(num_hilos)]
hilos = []

# Hare cada hilo 10 simulaciones
for i in range(num_hilos):
    hilos.append(th.Thread(target=calcular_tiempos, args=(150, 10, tiempos[i])))    

for hilo in hilos:
    hilo.start()
for hilo in hilos:
    hilo.join()

tiempo_total = []
for tiempo in tiempos:   
    tiempo_total += tiempo
vec_prom = np.mean(np.array(tiempo_total))
print(vec_prom)

"""### Para k = 200"""

# Para k=200 M = 20
num_hilos = 20
tiempos = [[] for i in range(num_hilos)]
hilos = []

# Hare cada hilo 10 simulaciones
for i in range(num_hilos):
    hilos.append(th.Thread(target=calcular_tiempos, args=(20, 10, tiempos[i])))    

for hilo in hilos:
    hilo.start()
for hilo in hilos:
    hilo.join()

tiempo_total = []
for tiempo in tiempos:   
    tiempo_total += tiempo
vec_prom = np.mean(np.array(tiempo_total))
print(vec_prom)

# Para k=200 M = 40
M = 40
num_hilos = 20
tiempos = [[] for i in range(num_hilos)]
hilos = []

# Hare cada hilo 10 simulaciones
for i in range(num_hilos):
    hilos.append(th.Thread(target=calcular_tiempos, args=(M, 10, tiempos[i])))    

for hilo in hilos:
    hilo.start()
for hilo in hilos:
    hilo.join()

tiempo_total = []
for tiempo in tiempos:   
    tiempo_total += tiempo
vec_prom = np.mean(np.array(tiempo_total))
print(vec_prom)

# Para k=200 M = 80
M = 80
num_hilos = 20
tiempos = [[] for i in range(num_hilos)]
hilos = []

# Hare cada hilo 10 simulaciones
for i in range(num_hilos):
    hilos.append(th.Thread(target=calcular_tiempos, args=(M, 10, tiempos[i])))    

for hilo in hilos:
    hilo.start()
for hilo in hilos:
    hilo.join()

tiempo_total = []
for tiempo in tiempos:   
    tiempo_total += tiempo
vec_prom = np.mean(np.array(tiempo_total))
print(vec_prom)

# Para k=200 M = 150

M = 150
num_hilos = 200
tiempos = [[] for i in range(num_hilos)]
hilos = []

# Hare cada hilo 10 simulaciones
for i in range(num_hilos):
    hilos.append(th.Thread(target=calcular_tiempos, args=(M, 1, tiempos[i])))    

for hilo in hilos:
    hilo.start()
for hilo in hilos:
    hilo.join()

tiempo_total = []
for tiempo in tiempos:   
    tiempo_total += tiempo
vec_prom = np.mean(np.array(tiempo_total))
print(vec_prom)

"""Para k = 400"""

# Para k=400 M = 20
M = 20
num_hilos = 400
tiempos = [[] for i in range(num_hilos)]
hilos = []

# Hare cada hilo 10 simulaciones
for i in range(num_hilos):
    hilos.append(th.Thread(target=calcular_tiempos, args=(M, 1, tiempos[i])))    

for hilo in hilos:
    hilo.start()
for hilo in hilos:
    hilo.join()

tiempo_total = []
for tiempo in tiempos:   
    tiempo_total += tiempo
vec_prom = np.mean(np.array(tiempo_total))
print(vec_prom)

# Para k=400 M = 40
M = 40
num_hilos = 40
tiempos = [[] for i in range(num_hilos)]
hilos = []

# Hare cada hilo 10 simulaciones
for i in range(num_hilos):
    hilos.append(th.Thread(target=calcular_tiempos, args=(M, 1, tiempos[i])))    

for hilo in hilos:
    hilo.start()
for hilo in hilos:
    hilo.join()

tiempo_total = []
for tiempo in tiempos:   
    tiempo_total += tiempo
vec_prom = np.mean(np.array(tiempo_total))
print(vec_prom)

# Para k=400 M = 80
M = 80
num_hilos = 40
tiempos = [[] for i in range(num_hilos)]
hilos = []

# Hare cada hilo 10 simulaciones
for i in range(num_hilos):
    hilos.append(th.Thread(target=calcular_tiempos, args=(M, 1, tiempos[i])))    

for hilo in hilos:
    hilo.start()
for hilo in hilos:
    hilo.join()

tiempo_total = []
for tiempo in tiempos:   
    tiempo_total += tiempo
vec_prom = np.mean(np.array(tiempo_total))
print(vec_prom)

# Para k=400 M = 150
M = 150
num_hilos = 40
tiempos = [[] for i in range(num_hilos)]
hilos = []

# Hare cada hilo 10 simulaciones
for i in range(num_hilos):
    hilos.append(th.Thread(target=calcular_tiempos, args=(M, 1, tiempos[i])))    

for hilo in hilos:
    hilo.start()
for hilo in hilos:
    hilo.join()

tiempo_total = []
for tiempo in tiempos:   
    tiempo_total += tiempo
vec_prom = np.mean(np.array(tiempo_total))
print(vec_prom)

"""## Ejercicio 4"""

def simular_tiempo_ruina(M=50, n=0):                     
    while M > 0:    
        eleccion = random.random()
        if eleccion < 0.50:            
            M -= 1 
        else:
            M += 1
        n += 1        
    return n

def calcular_tiempo_ruina(M, k, tiempos):               
    for _ in range(k):
        ts = simular_tiempo_ruina(M)
        tiempos.append(ts)

"""---"""

# Para k=100 M = 20
M = 20
num_hilos = 100
tiempos = [[] for i in range(num_hilos)]
hilos = []

# Hare cada hilo 10 simulaciones
for i in range(num_hilos):
    hilos.append(th.Thread(target=calcular_tiempo_ruina, args=(M, 1, tiempos[i])))    

for hilo in hilos:
    hilo.start()
for hilo in hilos:
    hilo.join()

tiempo_total = []
for tiempo in tiempos:   
    tiempo_total += tiempo
vec_prom = np.mean(np.array(tiempo_total))
print(vec_prom)

# Para k=100 M = 40
M = 40
num_hilos = 100
tiempos = [[] for i in range(num_hilos)]
hilos = []

# Hare cada hilo 10 simulaciones
for i in range(num_hilos):
    hilos.append(th.Thread(target=calcular_tiempo_ruina, args=(M, 1, tiempos[i])))    

for hilo in hilos:
    hilo.start()
for hilo in hilos:
    hilo.join()

tiempo_total = []
for tiempo in tiempos:   
    tiempo_total += tiempo
vec_prom = np.mean(np.array(tiempo_total))
print(vec_prom)

# Para k=100 M = 80
M = 80
num_hilos = 100
tiempos = [[] for i in range(num_hilos)]
hilos = []

# Hare cada hilo 10 simulaciones
for i in range(num_hilos):
    hilos.append(th.Thread(target=calcular_tiempo_ruina, args=(M, 1, tiempos[i])))    

for hilo in hilos:
    hilo.start()
for hilo in hilos:
    hilo.join()

tiempo_total = []
for tiempo in tiempos:   
    tiempo_total += tiempo
vec_prom = np.mean(np.array(tiempo_total))
print(vec_prom)

# Para k=100 M = 150
M = 150
num_hilos = 100
tiempos = [[] for i in range(num_hilos)]
hilos = []

# Hare cada hilo 10 simulaciones
for i in range(num_hilos):
    hilos.append(th.Thread(target=calcular_tiempo_ruina, args=(M, 1, tiempos[i])))    

for hilo in hilos:
    hilo.start()
for hilo in hilos:
    hilo.join()

tiempo_total = []
for tiempo in tiempos:   
    tiempo_total += tiempo
vec_prom = np.mean(np.array(tiempo_total))
print(vec_prom)

"""---"""

# Para k=200 M = 20
M = 20
num_hilos = 200
tiempos = [[] for i in range(num_hilos)]
hilos = []

# Hare cada hilo 10 simulaciones
for i in range(num_hilos):
    hilos.append(th.Thread(target=calcular_tiempo_ruina, args=(M, 1, tiempos[i])))    

for hilo in hilos:
    hilo.start()
for hilo in hilos:
    hilo.join()

tiempo_total = []
for tiempo in tiempos:   
    tiempo_total += tiempo
vec_prom = np.mean(np.array(tiempo_total))
print(vec_prom)

# Para k=200 M = 40
M = 40
num_hilos = 200
tiempos = [[] for i in range(num_hilos)]
hilos = []

# Hare cada hilo 10 simulaciones
for i in range(num_hilos):
    hilos.append(th.Thread(target=calcular_tiempo_ruina, args=(M, 1, tiempos[i])))    

for hilo in hilos:
    hilo.start()
for hilo in hilos:
    hilo.join()

tiempo_total = []
for tiempo in tiempos:   
    tiempo_total += tiempo
vec_prom = np.mean(np.array(tiempo_total))
print(vec_prom)

# Para k=200 M = 80
M = 80
num_hilos = 200
tiempos = [[] for i in range(num_hilos)]
hilos = []

# Hare cada hilo 10 simulaciones
for i in range(num_hilos):
    hilos.append(th.Thread(target=calcular_tiempo_ruina, args=(M, 1, tiempos[i])))    

for hilo in hilos:
    hilo.start()
for hilo in hilos:
    hilo.join()

tiempo_total = []
for tiempo in tiempos:   
    tiempo_total += tiempo
vec_prom = np.mean(np.array(tiempo_total))
print(vec_prom)

# Para k=200 M = 150
M = 150
num_hilos = 200
tiempos = [[] for i in range(num_hilos)]
hilos = []

# Hare cada hilo 10 simulaciones
for i in range(num_hilos):
    hilos.append(th.Thread(target=calcular_tiempo_ruina, args=(M, 1, tiempos[i])))    

for hilo in hilos:
    hilo.start()
for hilo in hilos:
    hilo.join()

tiempo_total = []
for tiempo in tiempos:   
    tiempo_total += tiempo
vec_prom = np.mean(np.array(tiempo_total))
print(vec_prom)

"""---"""

# Para k=300 M = 20
M = 20
num_hilos = 300
tiempos = [[] for i in range(num_hilos)]
hilos = []

# Hare cada hilo 10 simulaciones
for i in range(num_hilos):
    hilos.append(th.Thread(target=calcular_tiempo_ruina, args=(M, 1, tiempos[i])))    

for hilo in hilos:
    hilo.start()
for hilo in hilos:
    hilo.join()

tiempo_total = []
for tiempo in tiempos:   
    tiempo_total += tiempo
vec_prom = np.mean(np.array(tiempo_total))
print(vec_prom)

# Para k=300 M = 40
M = 40
num_hilos = 300
tiempos = [[] for i in range(num_hilos)]
hilos = []

# Hare cada hilo 10 simulaciones
for i in range(num_hilos):
    hilos.append(th.Thread(target=calcular_tiempo_ruina, args=(M, 1, tiempos[i])))    

for hilo in hilos:
    hilo.start()
for hilo in hilos:
    hilo.join()

tiempo_total = []
for tiempo in tiempos:   
    tiempo_total += tiempo
vec_prom = np.mean(np.array(tiempo_total))
print(vec_prom)

# Para k=300 M = 80
M = 80
num_hilos = 300
tiempos = [[] for i in range(num_hilos)]
hilos = []

# Hare cada hilo 10 simulaciones
for i in range(num_hilos):
    hilos.append(th.Thread(target=calcular_tiempo_ruina, args=(M, 1, tiempos[i])))    

for hilo in hilos:
    hilo.start()
for hilo in hilos:
    hilo.join()

tiempo_total = []
for tiempo in tiempos:   
    tiempo_total += tiempo
vec_prom = np.mean(np.array(tiempo_total))
print(vec_prom)

# Para k=300 M = 150
M = 150
num_hilos = 300
tiempos = [[] for i in range(num_hilos)]
hilos = []

# Hare cada hilo 10 simulaciones
for i in range(num_hilos):
    hilos.append(th.Thread(target=calcular_tiempo_ruina, args=(M, 1, tiempos[i])))    

for hilo in hilos:
    hilo.start()
for hilo in hilos:
    hilo.join()

tiempo_total = []
for tiempo in tiempos:   
    tiempo_total += tiempo
vec_prom = np.mean(np.array(tiempo_total))
print(vec_prom)

